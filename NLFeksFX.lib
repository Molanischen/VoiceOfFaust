declare name "Nonlinear EKS";
declare author "Julius Smith and Romain Michon";
declare version "1.0";
declare license "STK-4.3";
declare copyright "Julius Smith";
declare reference "http://ccrma.stanford.edu/~jos/pasp/vegf.html";
// -> Virtual\_Electric\_Guitars\_Faust.html";

import("music.lib");    // Define SR, delay
import("instrument.lib");
import("effect.lib");   // stereopanner

//==================== GUI SPECIFICATION ================

// standard MIDI voice parameters:
// NOTE: The labels MUST be "freq", "gain", and "gate" for faust2pd
//freq = nentry("freq", 440, 20, 7040, 1);  // Hz
//gain = nentry("gain", 1, 0, 10, 0.01);    // 0 to 1
//gate = button("gate");                    // 0 or 1

// Additional parameters (MIDI "controllers"):

// Pick angle in [0,0.9]:
//pickangle = 0.9 * hslider("pick_angle",0,0,0.9,0.1);

// Normalized pick-position in [0,0.5]:
//beta = hslider("pick_position [midi: ctrl 0x81]", 0.13, 0.02, 0.5, 0.01);
       // MIDI Control 0x81 often "highpass filter frequency"

// String decay time in seconds:
//t60 = hslider("decaytime_T60", 4, 0, 10, 0.01);  // -60db decay time (sec)

// Normalized brightness in [0,1]:
//B = hslider("brightness [midi:ctrl 0x74]", 0.5, 0, 1, 0.01);// 0-1
    // MIDI Controller 0x74 is often "brightness" 
    // (or VCF lowpass cutoff freq)

// Dynamic level specified as dB level desired at Nyquist limit:
//L = hslider("dynamic_level", -10, -60, 0, 1) : db2linear;
// Note: A lively clavier is obtained by tying L to gain (MIDI velocity).

//Nonlinear filter parameters
//typeModulation = nentry("v:Nonlinear Filter/typeMod",0,0,4,1);
//nonLinearity = hslider("Nonlinearity",0,0,1,0.01) : smooth(0.999);
//frequencyMod = hslider("freqMod",1,0,8,0) : smooth(0.999);

//==================== SIGNAL PROCESSING ================

//compressor_mono(ratio,thresh,att,rel,x)

stringloop(audio,freq,nlfOrder,t60,thresh,nonLinearity,B,frequencyMod) = 
audio : (+  : NLFM) ~ (compressor_mono(100,thresh,0.1,30) : fdelay4(Pmax, P-2) : loopfilter)
with
{
nlfOrder = 16;
P = SR/freq ; // fundamental period in samples
Pmax = 4096; // maximum P (for delay-line allocation)



rho = pow(0.001,1.0/(freq*t60)); // multiplies loop-gain

// Original EKS damping filter:
b1 = 0.5*B; b0 = 1.0-b1; // S and 1-S
dampingfilter1(x) = rho * ((b0 * x) + (b1 * x'));
// Linear phase FIR3 damping filter:
h0 = (1.0 + B)/2; h1 = (1.0 - B)/4;
dampingfilter2(x) = rho * (h0 * x' + h1*(x+x''));

loopfilter = dampingfilter2; // or dampingfilter1



//nonlinear allpass filter (nonLinearModulator is declared in instrument.lib)
NLFM =  MyNonLinearModulator(nonLinearity,1,freq,frequencyMod*freq,nlfOrder);
}
;

MyNonLinearModulator(nonlinearity,env,freq,freqMod,order) = 
	//theta is modulated by a sine wave
	_ <: allpassnn(order,(par(i,order,tosc)))
	with{
		//which frequency to use for the sine wave oscillator?
		freqOscMod = freqMod;

		//theta is modulated by a sine wave generator
		tosc = nonlinearity*PI*osc(freqMod)*env; 

		//incoming signal is sent to the nonlinear passive allpass ladder filter
		nonLinearFilterOsc = _ <: allpassnn(order,(par(i,order,tosc)));
	};
	

//process = filtered_excitation : stringloop : stereo : instrReverb;
