
//-----------------------------------------------
// FOF vocoder synthesis
//-----------------------------------------------

//fofCenters=     par(i,nrBands,   pow((pow((fofTop/fofBottom),1/15)),i)*fofBottom);
fofFund(freq) =
    fund(freq,fofOctave);

fofCenters = VocoderFreqs(fofBottom,fofTop);
/*fofSkirts  = VocoderFreqs(fofSkirtBottom,fofSkirtTop);*/
/*fofDecays  = VocoderFreqs(fofDecayBottom,fofDecayTop);*/
fofSkirts  = VocoderFreqs(fofSkirtBottom,fofSkirtTop);
fofDecays  = VocoderLinArray(fofDecayBottom,fofDecayTop);

fofOscs=
    interleave(nrBands,6):
    par(i, nrBands, (fof));
//fof(fReso,fund,skirt,decay,phase,vol) =

//normal mixer
FOFvocoderMixer(0) =bus(nrBands*nrOutChan)<:(
               (bus(nrBands*nrOutChan):>(par(i,nrOutChan,(outputRouting==0:dezip) *_)))
               ,(interleave(nrBands,nrOutChan):par(i, nrOutChan,(bus((nrBands)):>_*(outputRouting==1:dezip))))
               ,(par(i,nrOutChan, bus(nrBands):>(outputRouting==2:dezip) *_))
               ,(butterfly(nrBands*nrOutChan):>(par(i,nrOutChan,(outputRouting==3:dezip) *_)))
               ,(interleave(nrBands,nrOutChan):par(i, nrOutChan,(butterfly((nrBands)):>_*(outputRouting==4:dezip))))
               ,(bus(nrBands*nrOutChan):>butterfly(nrOutChan):par(i,nrOutChan,(outputRouting==5:dezip) *_))
               ,(par(i,nrOutChan, bus(nrBands):>(outputRouting==6:dezip) *_):butterfly(nrOutChan))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>bus(nrOutChan);

// Ambisonics mixer.
FOFvocoderMixer(1)  = routing:((angles,bus(nrBands*nrOutChan)): interleave(nrBands*nrOutChan ,2)) : par(i,nrBands*nrOutChan,myMap):>bus((ambisonicsOrder*2)+1)
with {
  myMap(a) = _<:encoder(ambisonicsOrder, _, a);
  angles = VocoderLinArray(angleBottom, angleTop)<:par(i, nrOutChan/2,(bus(nrBands),par(i,nrBands,_*-1))):interleave(nrBands*nrOutChan/2,2);
  routing =bus(nrBands*nrOutChan)<:(
               (bus(nrBands*nrOutChan):(par(i,nrBands*nrOutChan,(outputRouting==0:dezip) *_)))
               ,(interleave(nrBands,nrOutChan):(par(i,nrBands*nrOutChan,(outputRouting==1:dezip) *_)))
               ,(butterfly(nrBands*nrOutChan):(par(i,nrBands*nrOutChan,(outputRouting==2:dezip) *_)))
               ,(butterfly(nrBands*nrOutChan):interleave(nrBands,nrOutChan):(par(i,nrBands*nrOutChan,(outputRouting==3:dezip) *_)))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>bus(nrBands*nrOutChan);
};


//fofvocoder(audio,freq)=(fofCenters,analizer(voice(audio),freq),fofFund(freq)):fofOscs:vocoderMixer:par(i, 2, min(100):max(-100)):WidePanner(fofWidth);

fofvocoder(audio,freq)=
  //the noises part is to make a different (low)freq modulation for each osc.
  //noises(nrBands,0):smooth(tau2pole(32))
  //"(i+1)*" is to make each band different
  par(i,nrOutChan
    ,(VocoderLinArray(fofPhaseRandBottom,fofPhaseRandTop):par(j,nrBands,(_*(noises(nrBands*nrOutChan,(i+1)*j)):smooth(tau2pole(fofPhaseSpeed)))),fofCenters,(fofFund(freq)<:bus(nrBands)),fofSkirts,fofDecays,analizer(voice(audio),freq))
    :fofOscs)
  :FOFvocoderMixer(ambisonicsOn)
  :postProc(nrOutChan,ambisonicsOn,volume*0.0003,1);

//fof(fReso,fund,skirt,decay,phase,vol) =


