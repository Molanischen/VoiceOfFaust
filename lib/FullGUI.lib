//-----------------------------------------------
// the GUI
//-----------------------------------------------

OSCgroup(x)    = (hgroup("[0]OSC", x)); // To recieve OSC pitch and other messages
//qompander    = [1]
tabs(x)        = (tgroup("[1]", x));
synthsGroup(x) = tabs(hgroup("[0]synths", x));
FXGroup(x)     = tabs(hgroup("[1]effects", x));


OSCpitch                = OSCgroup(nentry("[0]pitch", MinInputPitch, MinInputPitch, MaxInputPitch, 0.001));
OSCfidelity             = OSCgroup(nentry("[1]fidelity", 0, 0, 1, 0.001));
OSConset                = OSCgroup(nentry("[2]onset", 0, 0, 1,0.001 ));
formant                 = OSCgroup(nentry("[3]formant", MinInputPitch, MinInputPitch, 12000, 0.001)):smooth(0.999);
envelop                 = abs : max ~ -(1.0/SR) : max(db2linear(-70)) : linear2db;
MeterGroup(x)           = (vgroup("[4]output level", x)); // To recieve OSC pitch and other messages
VuMeter                 = par(i,2,_<:(_, (envelop :(OSCgroup(MeterGroup(hbargraph("[4][unit:dB][tooltip: output level in dB]", -70, +6))))):attach));
ManualOnset             = OSCgroup(button("[5]trigger")); //button does not seem to recieve osc

cleanGroup(x)           = synthsGroup((vgroup("[0]clean[tooltip: the input signal, qompanded ]", x)));
cleanGroupLevel(x)      = cleanGroup((vgroup("[0]levels", x)));
cleanVolume             = cleanGroupLevel(vslider("[0]volume[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
cleanNLKS               = cleanGroupLevel(vslider("[1]K-S[tooltip: a variation on Karplus Strong][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
cleanpmFX               = cleanGroupLevel(vslider("[2]PM[tooltip: phase modulation][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1

subGroup(x)             = synthsGroup((vgroup("[1]sub[tooltip:a sinewave]", x)));
subGroupLevel(x)        = subGroup((vgroup("[0]levels", x)));
subVolume               = subGroupLevel(vslider("[0]volume[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
subNLKS                 = subGroupLevel(vslider("[1]K-S[tooltip: a variation on Karplus Strong][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
subpmFX                 = subGroupLevel(vslider("[2]PM[tooltip: phase modulation][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
subOctave               = subGroupLevel(vslider("[3]octave",	-1, -2, 2, 1):octaveMultiplier);       // set the octave of sub

vocoderGroup(x)         = synthsGroup((hgroup("[2]vocoder[tooltip: a traditional vocoder, extended]", x)));
vocoderGroupLevel(x)    = vocoderGroup((vgroup("[0]levels", x)));
vocoderVolume           = vocoderGroupLevel(vslider("[0]volume[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
vocoderNLKS             = vocoderGroupLevel(vslider("[1]K-S[tooltip: a variation on Karplus Strong][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
vocoderpmFX             = vocoderGroupLevel(vslider("[2]PM[tooltip: phase modulation][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
vocoderOctave           = vocoderGroupLevel(vslider("[3]octave",	-1, -2, 2, 1):octaveMultiplier);        // set the octave of vocoder

vocoderParamsGroup(x)   = vocoderGroup((vgroup("[1]parameters", x)));
vocoderTop              = vocoderParamsGroup(vslider("[1]top[style:knob][tooltip: the lowest frequency of the band-pass filters]",	defaultTop, 1, 64, 0.001):pow(2):smooth(0.999)); // 1 to 100 logarithmicly, todo: check why it was 1 to 4000 in pd
vocoderBottom           = vocoderParamsGroup(vslider("[2]bottom[style:knob][tooltip: the highest frequency of the band-pass filters]",	defaultBottom, 0.5, 7, 0.001):pow(2):smooth(0.999)); // 0.25 to 49 logarithmicly
vocoderQ                = vocoderParamsGroup(vslider("[3]Q[style:knob][tooltip: the bandwidt/resonance of the band-pass filters]",	1.2, 0.3, 7, 0.001):pow(2):smooth(0.999));     // 0.1 to 49 logarithmicly,
vocoderMix              = vocoderParamsGroup(vslider("[4]mix[style:knob][tooltip: amount of man oscillator vs amount of detuned osclillators]",	1, 0, 1, 0.001)):pow(2):smooth(0.999);
vocoderDetune           = vocoderParamsGroup(vslider("[5]detune[style:knob][tooltip: the amount of detune]",	0.75, 0, 1, 0.001):smooth(0.999));
vocoderSawPulse         = vocoderParamsGroup(vslider("[6]saw-pulse[style:knob][tooltip: crossfade from saw to pulse]", 0, 0, 1, 0.001)):pow(1.5):smooth(0.999);
vocoderDuty             = vocoderParamsGroup(vslider("[7]pulse-width[style:knob][tooltip: the width of the pulse-oscillator]", 0.5, 0.5, 1, 0.001):min(0.9996));
vocoderWidth            = vocoderParamsGroup(vslider("[8]width[style:knob][tooltip:stereo-width]",	1, 0, 2, 0.001):smooth(0.999)); // wide pan, 0                                                                   = mono 1 = normal 2 = full-wide

PAFvocoderGroup(x)      = synthsGroup((hgroup("[3]PAFvocoder[tooltip: a vocoder built from oscilators that sound like they have a bandpass-filter on them]", x)));
PAFvocoderGroupLevel(x) = PAFvocoderGroup((vgroup("[0]levels", x)));
pafVolume               = PAFvocoderGroupLevel(vslider("[0]volume[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
pafNLKS                 = PAFvocoderGroupLevel(vslider("[1]K-S[tooltip: a variation on Karplus Strong][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
pafpmFX                 = PAFvocoderGroupLevel(vslider("[2]PM[tooltip: phase modulation][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
pafOctave               = PAFvocoderGroupLevel(vslider("[3]octave",	0, -2, 2, 1):octaveMultiplier);        // set the octave of paf


PAFparamsGroup(x)       = PAFvocoderGroup((vgroup("[1]parameters", x)));
pafTop                  = PAFparamsGroup(vslider("[1]top[style:knob][tooltip: the lowest frequency of the band-pass filters]",		defaultTop, 1, 64, 0.001):pow(2):smooth(0.999));		//1 to 100 logarithmicly, todo: check why it was 1 to 4000 in pd
pafBottom               = PAFparamsGroup(vslider("[2]bottom[style:knob][tooltip: the highest frequency of the band-pass filters]",	defaultBottom, 0.5, 7, 0.001):pow(2):smooth(0.999));			//0.25 to 49 logarithmicly
pafIndex                = PAFparamsGroup(vslider("[3]index[style:knob][tooltip: PAF index]",	25, 1, 100, 0.001):smooth(0.999));
pafWidth                = PAFparamsGroup(vslider("[4]width[style:knob][tooltip:stereo-width]",1, 0, 2, 0.001):smooth(0.999)); // wide pan, 0                                                                         = mono 1 = normal 2 = full-wide


//-----------------------------------------------
// FOF
//-----------------------------------------------
fofVocoderGroup(x)            = synthsGroup((hgroup("[4]FOFvocoder[tooltip: a vocoder built from oscilators that sound like they have a bandpass-filter on them]", x)));
fofVocoderGroupLevel(x)       = fofVocoderGroup((vgroup("[0]levels", x)));
fofVolume                     = fofVocoderGroupLevel(vslider("[0]volume[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
fofNLKS                       = fofVocoderGroupLevel(vslider("[1]K-S[tooltip: a variation on Karplus Strong][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
fofpmFX                       = fofVocoderGroupLevel(vslider("[2]PM[tooltip: phase modulation][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1
fofOctave                     = fofVocoderGroupLevel(vslider("[3]octave",	-1, -2, 2, 1):octaveMultiplier);       // set the octave of fof

fofparamsGroup(x)             = fofVocoderGroup((vgroup("[1]parameters", x)));
fofTop                        = fofparamsGroup(vslider("[1]top[style:knob][tooltip: the highest frequency of the band-pass filters]",	defaultTop, 1, 64, 0.001):pow(2):smooth(0.999));		//1 to 100 logarithmicly,
fofBottom                     = fofparamsGroup(vslider("[2]bottom[style:knob][tooltip: the lowest frequency of the band-pass filters]",	defaultBottom, 0.5, 7, 0.001):pow(2):smooth(0.999));			//0.25 to 49 logarithmicly
fofSkirtTop                   = fofparamsGroup(vslider("[3]skirtTop[style:knob]", 1.212, 0.1, 9, 0.001):pow(4)*0.001:smooth(0.999));
fofSkirtBottom                = fofparamsGroup(vslider("[4]skirtBottom[style:knob]", 3.882, 0.1, 9, 0.001):pow(4)*0.001:smooth(0.999));
fofDecayTop                   = fofparamsGroup(vslider("[5]decayTop[style:knob]", 1.88, 0, 4, 0.001):pow(4):smooth(0.999));
fofDecayBottom                = fofparamsGroup(vslider("[6]decayBottom[style:knob]", 1.161, 0.001, 4, 0.001):pow(4):smooth(0.999));

//was used for formant phase:
//fofPhaseRand                = fofparamsGroup((vslider("[5]phase rnd[style:knob]", 1, 0, 1, 0.001)*0.014)+0.996:smooth(0.999));
fofPhaseRand                  = fofparamsGroup((vslider("[7]phase rnd[style:knob][tooltip: phase randomization amount]", 0.355, 0, 1, 0.001)):pow(2)*400:smooth(0.999));
//fofWidth                    = fofparamsGroup(vslider("[8]width[style:knob]",2, 0, 2, 0.001):smooth(0.999)); //wide pan, 0=mono 1=normal 2=full-wide
//width                       = vslider("width", 3, 3, 100, 0.001)*0.001:smooth(0.999);
//decay                       = vslider("decay", 0, 0, 10, 0.001):_<:*:smooth(0.999);
//fReso                       = vslider("fReso", 60, 0, 1270, 0.001):smooth(0.999);

// -----------------------------------------------
// FM
// -----------------------------------------------

FMgroup(x)         = synthsGroup((hgroup("[5]FM[tooltip: sinewaves whose frequency is modulated by the input voice]", x)));
FMgroupLevel(x)    = FMgroup((vgroup("[0]levels", x)));
FMvolume           = FMgroupLevel(vslider("[01]volume[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
fmNLKS             = FMgroupLevel(vslider("[1]K-S[tooltip: a variation on Karplus Strong][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));     // 0 to 1
FMpmFX             = FMgroupLevel(vslider("[2]PM[tooltip: phase modulation][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));     // 0 to 1

FMparamsGroup(x)   = FMgroup((vgroup("[1]parameters", x)));

HHFMparamsGroup(x) = FMparamsGroup((hgroup("[0]+2 oct", x)));
FMvolHH            = HHFMparamsGroup(vslider("[1]vol[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));
FMindexHH          = HHFMparamsGroup(vslider("[2]index[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999):_*15000);
FMdynHH            = HHFMparamsGroup(vslider("[3]dyn[style:knob]",	0, 0, 1, 0.001):smooth(0.999));

HFMparamsGroup(x)  = FMparamsGroup((hgroup("[1]+1 oct", x)));
FMvolH             = HFMparamsGroup(vslider("[1]vol[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));
FMindexH           = HFMparamsGroup(vslider("[2]index[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999):_*15000);
FMdynH             = HFMparamsGroup(vslider("[3]dyn[style:knob]",	0, 0, 1, 0.001):smooth(0.999));

mFMparamsGroup(x)  = FMparamsGroup((hgroup("[2]0 oct", x)));
FMvol              = mFMparamsGroup(vslider("[1]vol[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));
FMindex            = mFMparamsGroup(vslider("[2]index[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999):_*15000);
FMdyn              = mFMparamsGroup(vslider("[3]dyn[style:knob]",	0, 0, 1, 0.001):smooth(0.999));

LFMparamsGroup(x)  = FMparamsGroup((hgroup("[3]-1 oct", x)));
FMvolL             = LFMparamsGroup(vslider("[1]vol[style:knob]",	1, 0, 1, 0.001):pow(2):smooth(0.999));
FMindexL           = LFMparamsGroup(vslider("[2]index[style:knob]",	0.19, 0, 1, 0.001):pow(2):smooth(0.999):_*15000);
FMdynL             = LFMparamsGroup(vslider("[3]dyn[style:knob]",	0, 0, 1, 0.001):smooth(0.999));

LLFMparamsGroup(x) = FMparamsGroup((hgroup("[4]-2 oct", x)));
FMvolLL            = LLFMparamsGroup(vslider("[1]vol[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));
FMindexLL          = LLFMparamsGroup(vslider("[2]index[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999):_*15000);
FMdynLL            = LLFMparamsGroup(vslider("[3]dyn[style:knob]",	0, 0, 1, 0.001):smooth(0.999));


//-----------------------------------------------
// ringmodulation with emulated Casio CZ oscilators
//-----------------------------------------------

CZgroup(x)         = synthsGroup((hgroup("[6]CZ ringmodulator[tooltip: the voice is ringmodulated with oscilators that are in tune with the input pitch]", x)));
CZgroupLevel(x)    = CZgroup((vgroup("[0]levels", x)));
CZvolume           = CZgroupLevel(vslider("[01]volume[style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
CZNLKS             = CZgroupLevel(vslider("[1]K-S[tooltip: a variation on Karplus Strong][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));     // 0 to 1
CZpmFX             = CZgroupLevel(vslider("[2]PM[tooltip: phase modulation][style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999));     // 0 to 1
CZparamsGroup(x)   = CZgroup((vgroup("[1]parameters", x)));


HHCZparamsGroup(x) = CZparamsGroup((hgroup("[0]+2 oct", x)));
CZsquareHH         = HHCZparamsGroup(vslider("[0]square[tooltip: the level of the square oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZsquareIxHH       = HHCZparamsGroup(vslider("[1]squareIx[tooltip: morph from sine to square][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseHH          = HHCZparamsGroup(vslider("[2]pulse[tooltip: the level of the pulse oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseIxHH        = HHCZparamsGroup(vslider("[3]pulseIx[tooltip: morph from sine to pulse][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZresHH            = HHCZparamsGroup(vslider("[4]reso[tooltip: the level of the resonance oscillator][style:knob]",		0, 0, 1, 0.001):smooth(0.999));
CZresMultHH        = HHCZparamsGroup(vslider("[5]resMult[tooltip: resonant frequency, as a multiplication factor for the formant][style:knob]",	0, 0, 1, 0.001):smooth(0.999));

HCZparamsGroup(x)  = CZparamsGroup((hgroup("[1]+1 oct", x)));
CZsquareH          = HCZparamsGroup(vslider("[0]square[tooltip: the level of the square oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZsquareIxH        = HCZparamsGroup(vslider("[1]squareIx[tooltip: morph from sine to square][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseH           = HCZparamsGroup(vslider("[2]pulse[tooltip: the level of the pulse oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseIxH         = HCZparamsGroup(vslider("[3]pulseIx[tooltip: morph from sine to pulse][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZresH             = HCZparamsGroup(vslider("[4]reso[tooltip: the level of the resonance oscillator][style:knob]",		0, 0, 1, 0.001):smooth(0.999));
CZresMultH         = HCZparamsGroup(vslider("[5]resMult[tooltip: resonant frequency, as a multiplication factor for the formant][style:knob]",	0, 0, 1, 0.001):smooth(0.999));

mCZparamsGroup(x)  = CZparamsGroup((hgroup("[2]0 oct", x)));
CZsquareM          = mCZparamsGroup(vslider("[0]square[tooltip: the level of the square oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZsquareIxM        = mCZparamsGroup(vslider("[1]squareIx[tooltip: morph from sine to square][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseM           = mCZparamsGroup(vslider("[2]pulse[tooltip: the level of the pulse oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseIxM         = mCZparamsGroup(vslider("[3]pulseIx[tooltip: morph from sine to pulse][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZresM             = mCZparamsGroup(vslider("[4]reso[tooltip: the level of the resonance oscillator][style:knob]",		0, 0, 1, 0.001):smooth(0.999));
CZresMultM         = mCZparamsGroup(vslider("[5]resMult[tooltip: resonant frequency, as a multiplication factor for the formant][style:knob]",	0, 0, 1, 0.001):smooth(0.999));

LCZparamsGroup(x)  = CZparamsGroup((hgroup("[3]-1 oct", x)));
CZsquareL          = LCZparamsGroup(vslider("[0]square[tooltip: the level of the square oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZsquareIxL        = LCZparamsGroup(vslider("[1]squareIx[tooltip: morph from sine to square][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseL           = LCZparamsGroup(vslider("[2]pulse[tooltip: the level of the pulse oscillator][style:knob]",	1, 0, 1, 0.001):smooth(0.999));
CZpulseIxL         = LCZparamsGroup(vslider("[3]pulseIx[tooltip: morph from sine to pulse][style:knob]",	0.667, 0, 1, 0.001):smooth(0.999));
CZresL             = LCZparamsGroup(vslider("[4]reso[tooltip: the level of the resonance oscillator][style:knob]",		0, 0, 1, 0.001):smooth(0.999));
CZresMultL         = LCZparamsGroup(vslider("[5]resMult[tooltip: resonant frequency, as a multiplication factor for the formant][style:knob]",	0, 0, 1, 0.001):smooth(0.999));

LLCZparamsGroup(x) = CZparamsGroup((hgroup("[4]-2 oct", x)));
CZsquareLL         = LLCZparamsGroup(vslider("[0]square[tooltip: the level of the square oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZsquareIxLL       = LLCZparamsGroup(vslider("[1]squareIx[tooltip: morph from sine to square][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseLL          = LLCZparamsGroup(vslider("[2]pulse[tooltip: the level of the pulse oscillator][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZpulseIxLL        = LLCZparamsGroup(vslider("[3]pulseIx[tooltip: morph from sine to pulse][style:knob]",	0, 0, 1, 0.001):smooth(0.999));
CZresLL            = LLCZparamsGroup(vslider("[4]reso[tooltip: the level of the resonance oscillator][style:knob]",		0, 0, 1, 0.001):smooth(0.999));
CZresMultLL        = LLCZparamsGroup(vslider("[5]resMult[tooltip: resonant frequency, as a multiplication factor for the formant][style:knob]",	0, 0, 1, 0.001):smooth(0.999));




//-----------------------------------------------
// input compression and expansion
//-----------------------------------------------

qompanderGroup(x) = FXGroup(vgroup("[0]input compression and expansion[tooltip: Reference: http://www.katjaas.nl/compander/compander.html]", x));
factor            = qompanderGroup(hslider("[0]factor[unit::1][style:knob]",		8, 0.8, 8, 0.01):smooth(0.999));
threshold         = qompanderGroup(hslider("[1]threshold [unit: dB][style:knob]",	-50, -96, -20, 0.01):smooth(0.999));
attack            = qompanderGroup(hslider("[2]attack[unit: ms][style:knob]",	1, 1, 20, 0.01):smooth(0.999));
release           = qompanderGroup(hslider("[3]release[unit: ms][style:knob]",	20, 20, 1000, 0.01):smooth(0.999));

//-----------------------------------------------
// Karplus Strong as an effect
//-----------------------------------------------

//todo: make FX group and routing
KPgroup(x)        = FXGroup((vgroup("[1]Karplus-Strong[tooltip: a feedback delay line whose delay-time is tuned to the input pitch]", x)));
mainKPgroup(x)    = KPgroup((hgroup("[1]main", x)));
KPvolume          = mainKPgroup(vslider("[0]volume [style:knob][tooltip: the output-level]",	0, 0, 1, 0.001)*0.2:pow(2):smooth(0.999));
KPrelease         = mainKPgroup(vslider("[1]decay[style:knob][tooltip: the decay time of the feedback]",	0.25, 0.001, 1, 0.001):pow(4)*3):smooth(0.999);         // 0 to 1
KPtresh           = mainKPgroup(vslider("[2] threshold [unit:dB] [tooltip: a limiter in the feedback-loop] [style:knob]", 21, -33, 33, 0.1)):smooth(0.999);
vocoderKPgroup(x) = mainKPgroup((hgroup("[3]vocoder[tooltip: an EQ based vocoder in the feedback loop]", x)));
KPvocoderStrength = vocoderKPgroup(vslider("[0]strength[style:knob][tooltip: 0 means all EQ's are at zero gain, and 1 means the EQ gains follow the input spectrum]",	0.72, 0, 1, 0.001):smooth(0.999));
KPeqCutBoost      = vocoderKPgroup(vslider("[1]cut/boost[style:knob][tooltip: -1 means cut only, 1 means boost only, and 0 means the average gain is zero]",	-0.72, -1, 1, 0.001):smooth(0.999));
KPtop             = vocoderKPgroup(vslider("[2]top[style:knob][tooltip: the highest frequency of the EQ's]",	defaultTop, 1, 64, 0.001):pow(2):smooth(0.999)); // 1 to 100 logarithmicly, todo: check why it was 1 to 4000 in pd
KPbottom          = vocoderKPgroup(vslider("[3]bottom[style:knob][tooltip: the lowest frequency of the EQ's]",	defaultBottom, 0.5, 7, 0.001):pow(2):smooth(0.999));
KPvocoderQ        = vocoderKPgroup(vslider("[4]Q[style:knob][tooltip: the bandwidt of the EQ's]",	3, 0.3, 7, 0.001):pow(2):smooth(0.999)); // 0.1 to 49 logarithmicly,

bright            = mainKPgroup(vslider("[4]damping[style:knob][tooltip: brightness of the feedback]", 0.5, 0, 1, 0.001)):pow(2):smooth(0.999); // -60db decay time (sec)

HHKPgroup(x)      = KPgroup((hgroup("[2]+2 oct", x)));
KPvolHH           = HHKPgroup(vslider("[0]volume [style:knob]",		0, 0, 1, 0.001):pow(2):smooth(0.999));
feedbackHH        = HHKPgroup(vslider("[1]feedback[style:knob][tooltip: feedback amount for this octave]", 0, 0, 1, 0.001)):pow(2):smooth(0.999); // -60db decay time (sec)
HHmodGroup(y)     = HHKPgroup((hgroup("[2]all-pass[tooltip: an all-pass filter in the feedback loop]", y)));
DCnonlinHH        = HHmodGroup(vslider("[1]static[tooltip: the static amount of phase shift by the all-pass filter][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly,
DCleftRightHH     = HHmodGroup(vslider("[2]left-right offset[tooltip: the difference in phase shift between left and right][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly,
HHoscModGroup(y)  = HHKPgroup((hgroup("[3]modulated all-pass[tooltip: the same all-pass filter modulated by an oscilator]", y)));
nonLinHH          = HHoscModGroup(vslider("[1]amount [style:knob][tooltip: modulation amount]",0,0,1,0.001) : pow(3) : smooth(0.999));
frequencyModHH    = HHoscModGroup(vslider("[2]frequency [style:knob][tooltip: modulation frequency]",1,0,8,0.001) : smooth(0.999));
phaseHH           = HHoscModGroup(vslider("[3]phase[style:knob][tooltip: phase difference between the left and the right modulation oscillator]", 0.667, 0, 1, 0.001):pow(3)*0.5:smooth(0.999));

HKPgroup(x)       = KPgroup((hgroup("[3]+1 oct", x)));
KPvolH            = HKPgroup(vslider("[0]volume [style:knob]",		0, 0, 1, 0.001):pow(2):smooth(0.999));
feedbackH         = HKPgroup(vslider("[1]feedback[style:knob][tooltip: feedback amount for this octave]", 0, 0, 1, 0.001)):pow(2):smooth(0.999); // -60db decay time (sec)
HmodGroup(y)      = HKPgroup((hgroup("[2]all-pass[tooltip: an all-pass filter in the feedback loop]", y)));
DCnonlinH         = HmodGroup(vslider("[1]static[tooltip: the static amount of phase shift by the all-pass filter][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
DCleftRightH      = HmodGroup(vslider("[2]left-right offset[tooltip: the difference in phase shift between left and right][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
HoscModGroup(y)   = HKPgroup((hgroup("[3]modulated all-pass[tooltip: the same all-pass filter modulated by an oscilator]", y)));
nonLinH           = HoscModGroup(vslider("[1]amount [style:knob][tooltip: modulation amount]",0,0,1,0.001) : pow(3) : smooth(0.999));
frequencyModH     = HoscModGroup(vslider("[2]frequency [style:knob][tooltip: modulation frequency]",1,0,8,0.001) : smooth(0.999));
phaseH            = HoscModGroup(vslider("[3]phase[style:knob][tooltip: phase difference between the left and the right modulation oscillator]", 0.667, 0, 1, 0.001):pow(3)*0.5:smooth(0.999));

MKPgroup(x)       = KPgroup((hgroup("[4]0 oct"                    , x)));
KPvol             = MKPgroup(vslider("[0]volume [style:knob]"     , 0, 0, 1, 0.001):pow(2):smooth(0.999));
feedbackM         = MKPgroup(vslider("[1]feedback[style:knob][tooltip: feedback amount for this octave]"   , 0, 0, 1, 0.001)):pow(2):smooth(0.999); // -60db decay time (sec)
MmodGroup(y)      = MKPgroup((hgroup("[2]all-pass[tooltip: an all-pass filter in the feedback loop]"              , y)));
DCnonlin          = MmodGroup(vslider("[1]static[tooltip: the static amount of phase shift by the all-pass filter][style:knob]"         , 0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
DCleftRight       = MmodGroup(vslider("[2]left-right offset[tooltip: the difference in phase shift between left and right][style:knob]"         , 0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
MoscModGroup(y)   = MKPgroup((hgroup("[3]modulated all-pass[tooltip: the same all-pass filter modulated by an oscilator]"              , y)));
nonLin            = MoscModGroup(vslider("[1]amount [style:knob][tooltip: modulation amount]"    , 0,0,1,0.001) : pow(3) : smooth(0.999));
frequencyMod      = MoscModGroup(vslider("[2]frequency [style:knob][tooltip: modulation frequency]" , 1,0,8,0.001) : smooth(0.999));
phaseM            = MoscModGroup(vslider("[3]phase[style:knob][tooltip: phase difference between the left and the right modulation oscillator]"      , 0.667, 0, 1, 0.001):pow(3)*0.5:smooth(0.999));

LKPgroup(x)       = KPgroup((hgroup("[5]-1 oct", x)));
KPvolL            = LKPgroup(vslider("[0]volume [style:knob]",		0, 0, 1, 0.001):pow(2):smooth(0.999));
feedbackL         = LKPgroup(vslider("[1]feedback[style:knob][tooltip: feedback amount for this octave]", 0, 0, 1, 0.001)):pow(2):smooth(0.999);  // -60db decay time (sec)
LmodGroup(y)      = LKPgroup((hgroup("[2]all-pass[tooltip: an all-pass filter in the feedback loop]", y)));
DCnonlinL         = LmodGroup(vslider("[1]static[tooltip: the static amount of phase shift by the all-pass filter][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
DCleftRightL      = LmodGroup(vslider("[2]left-right offset[tooltip: the difference in phase shift between left and right][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
LoscModGroup(y)   = LKPgroup((hgroup("[3]modulated all-pass[tooltip: the same all-pass filter modulated by an oscilator]", y)));
nonLinL           = LoscModGroup(vslider("[1]amount [style:knob][tooltip: modulation amount]",0,0,1,0.001) : pow(3) : smooth(0.999));
frequencyModL     = LoscModGroup(vslider("[2]frequency [style:knob][tooltip: modulation frequency]",1,0,8,0.001) : smooth(0.999));
phaseL            = LoscModGroup(vslider("[3]phase[style:knob][tooltip: phase difference between the left and the right modulation oscillator]", 0.667, 0, 1, 0.001):pow(3)*0.5:smooth(0.999));

LLKPgroup(x)      = KPgroup((hgroup("[6]-2 oct", x)));
KPvolLL           = LLKPgroup(vslider("[0]volume [style:knob]",		0, 0, 1, 0.001):pow(2):smooth(0.999));
feedbackLL        = LLKPgroup(vslider("[1]feedback[style:knob][tooltip: feedback amount for this octave]", 0, 0, 1, 0.001)):pow(2):smooth(0.999); // -60db decay time (sec)
LLmodGroup(y)     = LLKPgroup((hgroup("[2]all-pass[tooltip: an all-pass filter in the feedback loop]", y)));
DCnonlinLL        = LLmodGroup(vslider("[1]static[tooltip: the static amount of phase shift by the all-pass filter][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
DCleftRightLL     = LLmodGroup(vslider("[2]left-right offset[tooltip: the difference in phase shift between left and right][style:knob]",	0, -2, 2, 0.001):pow(3):smooth(0.999)); //-9 to 9 logarithmicly
LLoscModGroup(y)  = LLKPgroup((hgroup("[3]modulated all-pass[tooltip: the same all-pass filter modulated by an oscilator]", y)));
nonLinLL          = LLoscModGroup(vslider("[1]amount [style:knob][tooltip: modulation amount]",0,0,1,0.001) : pow(3) : smooth(0.999));
frequencyModLL    = LLoscModGroup(vslider("[2]frequency [style:knob][tooltip: modulation frequency]",1,0,8,0.001) : smooth(0.999));
phaseLL           = LLoscModGroup(vslider("[3]phase[style:knob][tooltip: phase difference between the left and the right modulation oscillator]", 0.667, 0, 1, 0.001):pow(3)*0.5:smooth(0.999));

//-----------------------------------------------
// Phase Modulation as an effect
//-----------------------------------------------
pmFXgroup(x) = FXGroup(vgroup("[2]Phase Modulation[tooltip: delay lines modulated by an oscilator]",x));
//pmFXvolume = pmFXgroup(vslider("[0]volume [style:knob]",	0, 0, 1, 0.001):pow(2):smooth(0.999)); // 0 to 1 logarithmicly
pmFXi        = pmFXgroup(vslider("[1]amount [style:knob][tooltip: modulation amount]",0.5,0,4,0.001):pow(2):smooth(0.999) );
pmFXr        = pmFXgroup(vslider("[2]frequency [style:knob][tooltip: modulation frequency]",0.5,0,8,0.001):smooth(0.999) );
PMphase      = pmFXgroup(hslider("[3]phase[style:knob][tooltip: phase difference between the left and the right modulation oscillator]", 0.667, 0, 1, 0.001):pow(3)*0.5:smooth(0.999));

//-----------------------------------------------
// chorus
//-----------------------------------------------

chorusGroup(x)  =  FXGroup(hgroup("[0]chorus", x));

slowFreq	= chorusGroup(vslider("[0]slow freq",	0.57, 0, 5, 0.01):smooth(0.999));
slowDepth	= chorusGroup(vslider("[1]slow depth",	4, 0, 5, 0.01):pow(2):smooth(0.999));
fastFreq	= chorusGroup(vslider("[2]fast freq",	1, 0, 10, 0.01):smooth(0.999));
fastDepth	= chorusGroup(vslider("[3]fast depth",	4, 0, 10, 0.01):pow(2):smooth(0.999));
feedback	= chorusGroup(vslider("[4]feedback",	0, -1, 1, 0.01)*0.8:smooth(0.999));


