//-----------------------------------------------
// vocoder analizer
//-----------------------------------------------

subLevel(audio) = voice(audio):gate_mono(threshold-15,0,0.1,0.05):lowpass(3,300):amp_follower_ud(0.003,0.005)*4:tanh;

//subLevel(audio) = audio:lowpass(3,300):amp_follower_ud((vslider("up", 0, 0, 1, 0)*0.1),(vslider("down", 0, 0, 1, 0.001)*0.1))*6:tanh;

//analizerCenters(freq) = VocoderFreqs(0.853553,128):(par(i,nrBands, _,freq:*:min(SR/2)));

analizerCenters(freq) = VocoderFreqs(analizerBottom ,analizerTop):(par(i,nrBands, _,freq:*:min(SR/2)));

//amp_follower_ud params set for minimal distortion
//also sounds cool to vary between this and 0

analizers=
interleave(nrBands,4):par(i, nrBands,(autoQresonBP:amp_follower_ud(0.002 ,0.004)));

autoQresonBP(f,prevC,c,q) =
    // f:resonbp(c:min((SR/2)-10),Q,1):resonbp(c:min((SR/2)-10),Q,compensate*0.2)
    f:chooseResonBP(stableFilters,c:min((SR/2)-10),Q,1):chooseResonBP(stableFilters,c:min((SR/2)-10),Q,compensate*0.2)
    with {
      Q = ((((c-(prevC*autoQ)):max(20))*q)/(c:max(20)))*(1+(2*autoQ));
      BP1= 1.766;//1/hslider("[-1]bp1",	0, 0, 1, 0.001); //1.766
      BP2 =9.43;//1/hslider("[-1]bp2",	0, 0, 1, 0.001); //9.43
      FAC1 = 1;//hslider("[-1]fac1",	1, 1, 30, 0.001);//1
      FAC2 = 1.7;//hslider("[-1]fac2",	1, 1, 30, 0.001);//1.7
      FAC3 = 4;//hslider("[-1]fac3",	1, 1, 30, 0.001);//4
      com = 1/(Q/49);
      compensate =
            (((com*FAC1),(com<BP1)):*),
            ((((com-BP1)*FAC2+FAC1*BP1),((com>=BP1)&(com<=BP2))):*),
            ((((com-BP2)*FAC3+((BP2-BP1)*FAC2)+FAC1*BP1),(com>BP2)):*)
            :>_+1;
    };


analizer(audio,freq)=deEssedAnalizer(audio,freq);

simpleAnalizer(audio,freq)=
(
  (audio<:bus(nrBands))
  ,(analizerCenters(freq)<:((bus(nrBands)<:(freq/2,par(i,nrBands,selector(i-1,nrBands)))),(bus(nrBands))))
  ,(analizerQ<:bus(nrBands))
):analizers : gainScale(enableGainScale,gainScaling,freq);

deEssedAnalizer(audio,freq) =
  (simpleAnalizer(audio,freq), compressGains) : interleave(nrBands,2) : par(i, nrBands, (linear2db+_):db2linear)
with {
  highPassPreEmp = analizerCenters(freq):par(i, nrBands,  ( hz2pianokey - (deEssCorner:hz2pianokey) ) :min(0) * (deEssdBperOctave/12));
  preEmp = ( simpleAnalizer(audio,freq) , highPassPreEmp):interleave(nrBands,2) : par(i, nrBands, linear2db+_);
  compressGains = preEmp : par(i, nrBands, ((deEssThreshold-_) : min(0) * (deEssStrenght*dynAmount) ) );
  dynAmount = 1-(deEssDynStrenght*(newFidelity:pow(42):lag_ud(0.002,0.004)));
};
