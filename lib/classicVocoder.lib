//-----------------------------------------------
// Classic ve.vocoder synthesis
//-----------------------------------------------

vocoderFund(freq,index) =
    fund(freq,index,vocoderOctave);

vocoderOsc(freq,index) =
  ( par(i,2,(no.noises(2,i)*sqrt((vocoderOscNoise))))
  ,(stereosupersawpulse(vocoderN,vocoderFund(freq,index),freq,vocoderDetune,vocoderMix,vocoderSawPulse,vocoderDuty):par(i,2,_*sqrt((1-vocoderOscNoise))))
  ):> inputRouter(inputRoutingEnabled)
  with {
    inputRouter(0)= (_,_)<:si.bus(nrBands);
    inputRouter(1) =
    (_,_) <:(
       (par(i, 2, (xfadeSelector(inputRouting,0):dezip) *_) :ro.butterfly(2): par(i,2,_<:si.bus(nrBands/2)) )
      ,(par(i, 2, (xfadeSelector(inputRouting,1):dezip) *_) :ro.butterfly(2)<:ro.interleave(nrBands/2,2))
      ,(par(i, 2, (xfadeSelector(inputRouting,2):dezip) *_) :ro.butterfly(2)<:si.bus(nrBands))
      ,(par(i, 2, (xfadeSelector(inputRouting,3):dezip) *_) <:si.bus(nrBands))
      ,(par(i, 2, (xfadeSelector(inputRouting,4):dezip) *_) :( (_<:si.bus(nrBands/nrOutChan)) ,(_<:si.bus(nrBands-(nrBands/nrOutChan))) ))
      ,(par(i, 2, (xfadeSelector(inputRouting,5):dezip) *_) :ro.butterfly(2)<:ro.butterfly(nrBands))
      /*,(par(i, 2, xfadeSelector(inputRouting,6):dezip) *_) :ro.butterfly(2):( (_<:si.bus(nrBands/nrOutChan)) ,(_<:si.bus(nrBands-(nrBands/nrOutChan))) ))*/
      /*,(par(i, 2, xfadeSelector(inputRouting,7):dezip) *_) :ro.butterfly(2)<:ro.interleave(2,nrBands/2))*/
      /*,(par(i, 2, (inputRouting==7) *_) <:ro.interleave(2,nrBands/2):ro.hadamard(nrBands))*/
      /*,(par(i, 2, (inputRouting==8) *_) <:ro.hadamard(nrBands))*/
      /*,(par(i, 2, (inputRouting==9) *_) <:ro.hadamard(nrBands):ro.interleave(2,nrBands/2))*/
      // ==3 hademar?
      ):>si.bus(nrBands);
      };

volFilter(f,prevC,c,v,q) =
    f:chooseResonBP(stableFilters,c:min((ma.SR/2)-10),Q,v):chooseResonBP(stableFilters,c:min((ma.SR/2)-10),Q,compensate)
    with {
    //compensate for one filter:
    //compensate = (ma.tanh((1/(vocoderQ:min(1)))/2));
    //compensate for two filters:
    //pow(vslider("[-1]comp",	1, 1, 20, 0.001)):
    //compensate = ((1/(((vocoderQ:min(7))/7):pow(hslider("[-1]comp",	1, 0.001, 1, 0))))-1)*(hslider("[-1]comp",	1, 1, 2000, 0.001)):hbargraph("[-1]compensate", 0, 99)+1;
    //compensate = 1;// ((1/(vocoderQ:min(7)))/7);
    //compensate = (1/(((vocoderQ:min(2))/2)))*((((vocoderQ*0.5:min(1)*-1)+1)*10)+1);
    //gain = dezip(v*compensate, minline);
    //gain = (v*compensate);
	/*bandFreq =       25*pow(2,(band+1)*(9/bandsNumb));*/
	/*BW = (bandFreq - 25*pow(2,(band)*(9/bandsNumb)))*bwRatio;*/
	/*bandQ = bandFreq/BW;*/
    Q = ((((c-(prevC*autoQ)):max(20))*q)/(c:max(20)))*(1+(2*autoQ));
    BP1= 1.766;//1/hslider("[-1]bp1",	0, 0, 1, 0.001); //1.766
    BP2 =9.43;//1/hslider("[-1]bp2",	0, 0, 1, 0.001); //9.43
    FAC1 = 1;//hslider("[-1]fac1",	1, 1, 30, 0.001);//1
    FAC2 = 1.7;//hslider("[-1]fac2",	1, 1, 30, 0.001);//1.7
    FAC3 = 4;//hslider("[-1]fac3",	1, 1, 30, 0.001);//4
    com = 1/(Q/49);
    compensate =
          (((com*FAC1),(com<BP1)):*),
          ((((com-BP1)*FAC2+FAC1*BP1),((com>=BP1)&(com<=BP2))):*),
          ((((com-BP2)*FAC3+((BP2-BP1)*FAC2)+FAC1*BP1),(com>BP2)):*)
          :>_+1;
    };

// StereoVolFilterBank(nrBands,enableFeedback)
StereoVolFilterBank(nrBands,0) = StereoVolFilterBankNoFeedback(nrBands);
StereoVolFilterBank(nrBands,1) = StereoVolFilterBankWithFeedback(nrBands);

StereoVolFilterBankNoFeedback(nrBands)= (AutosatArray(enableFilterAutosat),si.bus(nrBands*4)):(ro.interleave(nrBands,5):par(i, nrBands, volFilter));

StereoVolFilterBankWithFeedback(nrBands)= (((ro.interleave(nrBands,2):par(i,nrBands,+):AutosatArray(enableFilterAutosat)),si.bus(nrBands*4)):ro.interleave(nrBands,5):par(i, nrBands, volFilter))~FBpath with {
  FBpath = si.bus(nrBands)<:(lowerFB,selfFB,higherFB,allFB):>si.bus(nrBands);
  lowerFB=
    si.bus(nrBands)
      <:((0,par(i,nrBands,ba.selector(i-1,nrBands)))
        :((si.bus(nrBands),(VocoderLinArrayChooser(lowerFBbottom,lowerFBmid,lowerFBband,lowerFBtop,para):par(i,nrBands,pow(3):dezip))):(ro.interleave(nrBands,2)):par(i,nrBands,*)));
  selfFB = ((si.bus(nrBands),(VocoderLinArrayChooser(selfFBbottom,selfFBmid,selfFBband,selfFBtop,para):par(i,nrBands,pow(3):dezip))):(ro.interleave(nrBands,2)):par(i,nrBands,*));
  higherFB=  si.bus(nrBands)<:((par(i,nrBands,ba.selector(i+1,nrBands)),0):((si.bus(nrBands),(VocoderLinArrayChooser(higherFBbottom,higherFBmid,higherFBband,higherFBtop,para):par(i,nrBands,pow(3):dezip))):(ro.interleave(nrBands,2)):par(i,nrBands,*)));
  allFB   = (si.bus(nrBands)<:par(i,nrBands,par(j,nrBands,_*(i!=j)):>_):>((si.bus(nrBands),(VocoderLinArrayChooser(allFBbottom,allFBmid,allFBband,allFBtop,para):par(i,nrBands,pow(3):dezip))):(ro.interleave(nrBands,2)):par(i,nrBands,*)));
    };

AutosatArray(0) = si.bus(nrBands);
AutosatArray(1) =
  (
    (
       si.bus(nrBands),
       (VocoderLinArrayChooser(autoSatBottom,autoSatMid,autoSatBand,autoSatTop,para):dezipBands)
    )
       :ro.interleave(nrBands,2)
  )
    :par(i,nrBands,si.bus(2)<:(((ba.selector(0,2):addDC(i))*(ba.selector(1,2):ba.db2linear)):autoSat)*((ba.selector(1,2)/8):autoSat*-8:ba.db2linear));
     addDC(band)=_+(VocoderLinArrayChooser(autoSatDCbottom,autoSatDCmid,autoSatDCband,autoSatDCtop,para):ba.selector(band,nrBands):pow(3)*64:dezip);

vocoderCenters(freq) =
    VocoderFreqsChooser(vocoderBottom,vocoderMid,vocoderBand,vocoderTop,para):(par(i,nrBands, _,freq * vocoderOctave:*:min(ma.SR/2):dezip));

endGainCompare(audio,freq) = (si.bus(nrOutChan),(voice(audio,freq)<:si.bus(nrOutChan))):ro.interleave(nrOutChan,2):par(i,nrOutChan,gainCompareElement);

StereoVocoder(audio,freq,index,fidelity) =
           ((vocoderOsc(freq,index)<:si.bus(nrBands))
           ,(vocoderCenters(freq)<:((si.bus(nrBands)<:((50:max(vocoderBottom*freq*vocoderOctave)),par(i,nrBands,ba.selector(i-1,nrBands)))),(si.bus(nrBands))))
           ,analizer(voice(audio,freq),freq,fidelity,enableDeEsser)
           ,(VocoderLinArrayChooser(vocoderQbottom,vocoderQmid,vocoderQband,vocoderQtop,para):dezipBands))
           :StereoVolFilterBank(nrBands,enableFeedback)
           :gainCompare(audio,index,fidelity,freq,enableGainCompare)
           :vocoderMixer(audio,freq,ambisonicsOn,outputRoutingEnabled,0)
           // :endGainCompare(audio,freq)
           :postProc(audio,freq,nrOutChan,ambisonicsOn,enableAutosat,volume*select2(gainCompEnable,0.001,0.02),width);
