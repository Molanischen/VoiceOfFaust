//-----------------------------------------------
// Classic vocoder synthesis
//-----------------------------------------------

vocoderFund(freq)=
    fund(freq,vocoderOctave);

vocoderOsc(freq) =

           ( par(i,2,(noises(2,i)*sqrt((vocoderOscNoise))))
           ,(stereosupersawpulse(vocoderN,vocoderFund(freq),freq,vocoderDetune,vocoderMix,vocoderSawPulse,vocoderDuty):par(i,2,_*sqrt((1-vocoderOscNoise))))
           ):>bus2
           <:(
              (par(i, 2, (xfadeSelector(inputRouting,0):dezip) *_) <:bus(nrBands))
             ,(par(i, 2, (xfadeSelector(inputRouting,1):dezip) *_) : cross(2) : par(i,2,_<:bus(nrBands/2)) )
             ,(par(i, 2, (xfadeSelector(inputRouting,2):dezip) *_) :( (_<:bus(nrBands/nrOutChan)) ,(_<:bus(nrBands-(nrBands/nrOutChan))) ))
             ,(par(i, 2, (xfadeSelector(inputRouting,3):dezip) *_) :butterfly(2)<:bus(nrBands))
             ,(par(i, 2, (xfadeSelector(inputRouting,4):dezip) *_) :butterfly(2)<:butterfly(nrBands))
             ,(par(i, 2, (xfadeSelector(inputRouting,5):dezip) *_) :butterfly(2): par(i,2,_<:bus(nrBands/2)) )
             ,(par(i, 2, (xfadeSelector(inputRouting,6):dezip) *_) :butterfly(2)<:interleave(nrBands/2,2))
             /*,(par(i, 2, xfadeSelector(inputRouting,6):dezip) *_) :butterfly(2):( (_<:bus(nrBands/nrOutChan)) ,(_<:bus(nrBands-(nrBands/nrOutChan))) ))*/
             /*,(par(i, 2, xfadeSelector(inputRouting,7):dezip) *_) :butterfly(2)<:interleave(2,nrBands/2))*/
             /*,(par(i, 2, (inputRouting==7) *_) <:interleave(2,nrBands/2):hadamard(nrBands))*/
             /*,(par(i, 2, (inputRouting==8) *_) <:hadamard(nrBands))*/
             /*,(par(i, 2, (inputRouting==9) *_) <:hadamard(nrBands):interleave(2,nrBands/2))*/
             // ==3 hademar?
            ):>bus(nrBands);

volFilter(fb,f,prevC,c,v,q) =
    (fb+f):resonbp(c:min((SR/2)-10),Q,v):resonbp(c:min((SR/2)-10),Q,compensate)
    with {
    //compensate for one filter:
    //compensate = (tanh((1/(vocoderQ:min(1)))/2));
    //compensate for two filters:
    //pow(vslider("[-1]comp",	1, 1, 20, 0.001)):
    //compensate = ((1/(((vocoderQ:min(7))/7):pow(hslider("[-1]comp",	1, 0.001, 1, 0))))-1)*(hslider("[-1]comp",	1, 1, 2000, 0.001)):hbargraph("[-1]compensate", 0, 99)+1;
    //compensate = 1;// ((1/(vocoderQ:min(7)))/7);
    //compensate = (1/(((vocoderQ:min(2))/2)))*((((vocoderQ*0.5:min(1)*-1)+1)*10)+1);
    //gain = dezip(v*compensate, minline);
    //gain = (v*compensate);
	/*bandFreq =       25*pow(2,(band+1)*(9/bandsNumb));*/
	/*BW = (bandFreq - 25*pow(2,(band)*(9/bandsNumb)))*bwRatio;*/
	/*bandQ = bandFreq/BW;*/
    Q = ((((c-(prevC*autoQ)):max(20))*q)/(c:max(20)))*(1+(2*autoQ));
    BP1= 1.766;//1/hslider("[-1]bp1",	0, 0, 1, 0.001); //1.766
    BP2 =9.43;//1/hslider("[-1]bp2",	0, 0, 1, 0.001); //9.43
    FAC1 = 1;//hslider("[-1]fac1",	1, 1, 30, 0.001);//1
    FAC2 = 1.7;//hslider("[-1]fac2",	1, 1, 30, 0.001);//1.7
    FAC3 = 4;//hslider("[-1]fac3",	1, 1, 30, 0.001);//4
    com = 1/(Q/49);
    compensate =
          (((com*FAC1),(com<BP1)):*),
          ((((com-BP1)*FAC2+FAC1*BP1),((com>=BP1)&(com<=BP2))):*),
          ((((com-BP2)*FAC3+((BP2-BP1)*FAC2)+FAC1*BP1),(com>BP2)):*)
          :>_+1;
    };

StereoVolFilterBank(nrBands)= (interleave(nrBands,6):par(i, nrBands, volFilter))~FBpath with {
  FBpath = bus(nrBands)<:(
     ((0,par(i,nrBands,selector(i-1,nrBands))):((bus(nrBands),(VocoderLinArrayParametricMid(lowerFBbottom,lowerFBmid,lowerFBband,lowerFBtop):par(i,nrBands,pow(3):dezip))):(interleave(nrBands,2)):par(i,nrBands,*)))
    ,((bus(nrBands),(VocoderLinArrayParametricMid(selfFBbottom,selfFBmid,selfFBband,selfFBtop):par(i,nrBands,pow(3):dezip))):(interleave(nrBands,2)):par(i,nrBands,*))
    ,((par(i,nrBands,selector(i+1,nrBands)),0):((bus(nrBands),(VocoderLinArrayParametricMid(higherFBbottom,higherFBmid,higherFBband,higherFBtop):par(i,nrBands,pow(3):dezip))):(interleave(nrBands,2)):par(i,nrBands,*)))
    , (bus(nrBands)<:par(i,nrBands,_<:par(j,nrBands,_*(i!=j))):>((bus(nrBands),(VocoderLinArrayParametricMid(allFBbottom,allFBmid,allFBband,allFBtop):par(i,nrBands,pow(3):dezip))):(interleave(nrBands,2)):par(i,nrBands,*)))
           ):>
           (
            (
               bus(nrBands),
               (VocoderLinArrayParametricMid(autoSatBottom,autoSatMid,autoSatBand,autoSatTop):par(i,nrBands,dezip))
            )
               :interleave(nrBands,2)
           )
           :par(i,nrBands,bus(2)<:(((selector(0,2):addDC(i))*(selector(1,2):db2linear)):autoSat)*((selector(1,2)/8):autoSat*-8:db2linear))
           with {
             addDC(band)=_+(VocoderLinArrayParametricMid(autoSatDCbottom,autoSatDCmid,autoSatDCband,autoSatDCtop):selector(band,nrBands):pow(3)*64:dezip);
           };
};

vocoderCenters(freq) =
    VocoderFreqsParametricMid(vocoderBottom,vocoderMid,vocoderBand,vocoderTop):(par(i,nrBands, _,freq * vocoderOctave:*:min(SR/2):dezip));

StereoVocoder(audio,freq)=
           ((vocoderOsc(freq)<:bus(nrBands))
           ,(vocoderCenters(freq)<:((bus(nrBands)<:((50:max(vocoderBottom*freq*vocoderOctave)),par(i,nrBands,selector(i-1,nrBands)))),(bus(nrBands))))
           ,analizer(voice(audio),freq)
           ,(VocoderLinArrayParametricMid(vocoderQbottom,vocoderQmid,vocoderQband,vocoderQtop):par(i,nrBands,dezip)))
           :StereoVolFilterBank(nrBands):vocoderMixer(ambisonicsOn)
           :postProc(nrOutChan,ambisonicsOn,volume*0.01,vocoderWidth);


//process(audio) = StereoVolFilterBank;
//vocoderOsc(PitchTracker(audio));


