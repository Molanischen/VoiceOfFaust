//-----------------------------------------------
// master index, all slave oscilators 'clock' to this.
//-----------------------------------------------
masterIndex(freq)= lf_sawpos(freq/4); // lowest possible pitch, as we can only shift up, using wrap
fund(freq,oct)= (4 * oct * masterIndex(freq)) - floor(4 * oct * masterIndex(freq)); //choose octaves

//-----------------------------------------------
// Some general functions
//-----------------------------------------------
// dezipper
dezip(x) = x:smooth(0.999);
// minimum of n values
minOfN(1) = _;
minOfN(2) = min;
minOfN(n) = (minOfN(n-1),_):min;
// maximum of n values
maxOfN(1) = _;
maxOfN(2) = max;
maxOfN(n) = (maxOfN(n-1),_):max;
// sum of n values
sumOfN(1) = _;
sumOfN(2) = +;
sumOfN(n) = (sumOfN(n-1),_):+;
// cheaper than actual dB calculations:
volScale=_:pow(2):smooth(0.999);
envelop                 = abs : max ~ -(1.0/SR) : max(db2linear(-70)) : linear2db;
VuMeter                 = par(i,2,_<:(_, (envelop :(OSCgroup(MeterGroup(hbargraph("[4][unit:dB][tooltip: output level in dB]", -70, +6))))):attach));

octaveMultiplier	=
    _<:
    (
        (_==-2) * 0.25,
        (_==-1) * 0.5,
        (_==0),
        (_==1) * 2,
        (_==2) * 4
    ):>_;

      // make a log array of values, from bottom to top
VocoderFreqs(bottom,top) =     par(i,nrBands,   pow((pow((top/bottom),1/(nrBands-1))),i)*bottom);
      // make a lin array of values, from bottom to top
VocoderLinArray(bottom,top) =     par(i,nrBands,   ((top-bottom)*(i/nrBands))+bottom);

vocoderMixer(0) =bus(nrBands)<:(
               (bus(nrBands):>(par(i,nrOutChan,(outputRouting==0:dezip) *_)))
               ,(interleave(nrBands/nrOutChan,nrOutChan):par(i, nrOutChan,(bus((nrBands/nrOutChan)):>_*(outputRouting==1:dezip))))
               ,(par(i,nrOutChan, bus(nrBands/nrOutChan):>(outputRouting==2:dezip) *_))
               ,(butterfly(nrBands):>(par(i,nrOutChan,(outputRouting==3:dezip) *_)))
               ,(interleave(nrBands/nrOutChan,nrOutChan):par(i, nrOutChan,(butterfly((nrBands/nrOutChan)):>_*(outputRouting==4:dezip))))
               ,(bus(nrBands):>butterfly(nrOutChan):par(i,nrOutChan,(outputRouting==5:dezip) *_))
               ,(par(i,nrOutChan, bus(nrBands/nrOutChan):>(outputRouting==6:dezip) *_):butterfly(nrOutChan))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>bus(nrOutChan);

             /*(par(i, 2, (inputRouting==0) *_) <:bus(nrBands))*/
             /*,(par(i, 2, (inputRouting==1) *_) : par(i,2,_<:bus(nrBands/2)) )*/
             /*,(par(i, 2, (inputRouting==2) *_) :( (_<:bus(nrBands/nrOutChan)) ,(_<:bus(nrBands-(nrBands/nrOutChan))) ))*/
             /*,(par(i, 2, (inputRouting==3) *_) :butterfly(2)<:bus(nrBands))*/
             /*,(par(i, 2, (inputRouting==4) *_) :butterfly(2)<:butterfly(nrBands))*/
             /*,(par(i, 2, (inputRouting==5) *_) <:hadamard(nrBands))*/
             /*// ==3 hademar?*/
// Ambisonics mixer.
vocoderMixer(1)  = routing:((angles,bus(nrBands)): interleave(nrBands,2)) : par(i,nrBands,myMap):>bus((ambisonicsOrder*2)+1)
with {
  myMap(a) = _<:encoder(ambisonicsOrder, _, a);
  angles = par(i,nrBands/2,   ((angleTop-angleBottom)*(i/(nrBands/2)))+angleBottom)<:(bus(nrBands/2),par(i,nrBands/2,_*-1)):interleave(nrBands/2,2);
  routing =bus(nrBands)<:(
               (bus(nrBands):(par(i,nrBands,(outputRouting==0:dezip) *_)))
               ,(interleave(nrBands/nrOutChan,nrOutChan):(par(i,nrBands,(outputRouting==1:dezip) *_)))
               ,(butterfly(nrBands):(par(i,nrBands,(outputRouting==2:dezip) *_)))
               ,(butterfly(nrBands):interleave(nrBands/nrOutChan,nrOutChan):(par(i,nrBands,(outputRouting==3:dezip) *_)))
               /*,(hademar:>par(i,nrOutChan, (outputRouting==2) *_))*/
             ):>bus(nrBands);
};

autoSat(x) = x:min(1):max(-1)<:2.0*_ * (1.0-abs(_)*0.5);

postProc(nrOutChan,0,volume,width) = par(i, nrOutChan, _*volume):WidePanner(width,nrOutChan):par(i,nrOutChan, autoSat);

postProc(nrOutChan,1,volume,width) = 
           wider(ambisonicsOrder,width) :rotate(ambisonicsOrder, rotation) :optimInPhase(ambisonicsOrder) 
           <:((decoderStereo(ambisonicsOrder):par(i,2,(_*volume): autoSat)), bus(2*ambisonicsOrder+1));
//to make it stereo
//todo: implement http://music.columbia.edu/pipermail/music-dsp/2012-February/070328.html
/*WidePanner(w,L,R) = (((1+w)*L + (1-w)*R)/2) , (((1+w)*R + (1-w)*L)/2);*/
WidePanner(w,2) = bus2<:(((1+w)*L + (1-w)*R)/2) , (((1+w)*R + (1-w)*L)/2)
with {
  L = selector(0,2);
  R = selector(1,2);
};
// for mutichannel, bypass the widepanner.
WidePanner(w,nr) = bus(nr);
voice(audio) = qompander(audio:highpass(3,PitchTracker(audio)*0.75),factor,threshold,attack,release);

//is actually dual mono. on purpose; to try and keep the image in the center.
//todo: make this stereo, and find a better way for  KP-FX to stay centered
oldstereoLimiter(pitch)=
  (dcblocker*0.5:compressor_mono(100,-12,decay*0.5,decay)),
  (dcblocker*0.5:compressor_mono(100,-12,decay*0.5,decay)):
  (compressor_mono(100,-6,0.001,decay*0.5)),
  (compressor_mono(100,-6,0.001,decay*0.5))
  with {
    decay                                = (1/pitch);
    same(x,time)                         = (x@time) == x;
    intervalTester(x,nrSamples,interval) = (prod(i,nrSamples,same(x,i*interval+1)));
    blockNoise                           = par(i,2,(intervalTester(pitch,2,265)*-1+1:smooth(0.999))*_);
    };

monoLimiter(pitch)=
  (dcblocker:compressor_mono(100,-6,decay*0.5,decay)):
  (compressor_mono(100,-3,0,decay*0.5))
  with {
    decay                                = (1/pitch);
    same(x,time)                         = (x@time) == x;
    intervalTester(x,nrSamples,interval) = (prod(i,nrSamples,same(x,i*interval+1)));
    blockNoise                           = par(i,2,(intervalTester(pitch,2,265)*-1+1:smooth(0.999))*_);
    };

stereoLimiter(pitch) =monoLimiter(pitch),monoLimiter(pitch);


