//-----------------------------------------------
// Karplus-Strong effect
//-----------------------------------------------

KPcenters(freq,oct) = VocoderFreqs(KPbottom,KPtop):(par(i,nrBands, _,freq * oct:*:min(ma.SR/2):dezip));

KPanalizer(audio,freq,fidelity) =
    analizer(audio,freq,fidelity,enableDeEsser)
    :par(i,nrBands,((_*KPvocoderStrength,((KPvocoderStrength*-1)+1)):+
    :ba.linear2db) );//adapt to eq instead of fi.bandpass

//serial equaliser, with parameters exposed:
eqOfN(1) = si.bus(4)<:(ba.selector(1,4),ba.selector(2,4),ba.selector(3,4),ba.selector(0,4)):fi.peak_eq_cq;
eqOfN(n) = (eqOfN(n-1),_,_,_):eqOfN(1);

EQbank(Oscilator,q) =
    ((si.bus(nrBands)<:(si.bus(nrBands),OffSet)<:(par(i, nrBands, (ba.selector(i,nrBands+1)+ba.selector(nrBands,nrBands+1))))),si.bus(nrBands))
    :(si.bus(2*nrBands),(q<:si.bus(nrBands)))
    :((Oscilator,ro.interleave(nrBands,3)):eqOfN(nrBands))
    with {
        N = 3; //uneven only: 1,3,5
        AvgVolume = sumOfN(nrBands)/nrBands;
        MinVolume = minOfN(nrBands);
        MaxVolume = maxOfN(nrBands);
        OffSet    =
           si.bus(nrBands)<:si.bus(nrBands*4):
           (KPeqCutBoost>0),
           (((KPeqCutBoost+1)*-AvgVolume)+(KPeqCutBoost*MaxVolume)),
           ((((KPeqCutBoost*-1)+1)*-AvgVolume)+KPeqCutBoost*-MinVolume):
           select2;
        };
KPvocoder(audio,feedback,freq,fidelity)= (feedback,KPvocoderQ,KPanalizer(voice(audio,freq),freq,fidelity),KPcenters(freq,1)):EQbank;

stringloopFBpath(freq, oct,feedback,phase,nonLinearity,frequencyMod,DC) =
      //(( de.fdelay4(Pmax, P-2)))
  (( NLFM : de.fdelay4(Pmax, P-2) : loopfilter))
    with {
      P = ma.SR/(freq*oct) ; // fundamental ba.period in samples
      Pmax = 4096; // maximum P (for de.delay-line allocation)

      rho = pow(0.001,1.0/(freq*oct*feedback*8)); // multiplies loop-gain

      // Original EKS damping filter:
      b1 = 0.5*bright; b0 = 1.0-b1; // S and 1-S
      dampingfilter1(x) = rho * ((b0 * x) + (b1 * x'));
      // Linear phase FIR3 damping filter:
      h0 = (1.0 + bright)/2; h1 = (1.0 - bright)/4;
      dampingfilter2(x) = rho * (h0 * x' + h1*(x+x''));

      loopfilter = _*rho;//:dampingfilter1; // or dampingfilter2

      //nonlinear allpass filter (nonLinearModulator is declared in instrument.lib)
      NLFM =  MyNonLinearModulator(nonLinearity,frequencyMod*freq*oct,phase,DC);
    };

feedbackADSR(audio,freq) = ma.tanh(voice(audio,freq)*2:an.amp_follower(KPrelease)):pow(4);

stringloopBank(freq,fidelity,audio,index,feedback,phaseLL,phaseL,phase,phaseH,phaseHH,DCnonlinLL,DCnonlinL,DCnonlin,DCnonlinH,DCnonlinHH) =
    (_+feedback
    <:(    stringloopFBpath(freq,0.25,feedbackLL*feedbackADSR(audio,freq),phaseLL,nonLinLL,frequencyModLL,DCnonlinLL),
    stringloopFBpath(freq,0.5,feedbackL*feedbackADSR(audio,freq),phaseL,nonLinL,frequencyModL,DCnonlinL),
    stringloopFBpath(freq,1,feedbackM*feedbackADSR(audio,freq),phase,nonLin,frequencyMod,DCnonlin),
    stringloopFBpath(freq,2,feedbackH*feedbackADSR(audio,freq),phaseH,nonLinH,frequencyModH,DCnonlinH),
    stringloopFBpath(freq,4,feedbackHH*feedbackADSR(audio,freq),phaseHH,nonLinHH,frequencyModHH,DCnonlinHH)
    )
    :> KPvocoder(audio,_,freq,fidelity))~ //no damping needed
    // :> KPvocoder(audio,_,freq,fidelity):dampingfilter1)~ //or dampingfilter2
//  feedback path
    ( co.compressor_mono(100,KPtresh,0,(1/(freq * 0.25 ))))
    :_*KPvolume
    with {

    // Original EKS damping filter:
    b1 = 0.5*bright; b0 = 1.0-b1; // S and 1-S
    dampingfilter1(x) = ((b0 * x) + (b1 * x'));
    // Linear phase FIR3 damping filter:
    h0 = (1.0 + bright)/2; h1 = (1.0 - bright)/4;
    dampingfilter2(x) = (h0 * x' + h1*(x+x''));
    };

stringloop(freq,audio,index,feedbackAmount,feedback,phase,DCnonlin) =
    ((_+feedback
    :
    stringloopFBpath(freq,1,feedbackAmount*feedbackADSR(audio,freq),phase,nonLin,frequencyMod,DCnonlin)
    )~ //or dampingfilter2
      //:KPvocoder(audio,_,freq):dampingfilter1)~ //or dampingfilter2
           ( co.compressor_mono(100,KPtresh,0,1/(freq *0.5 ))))
    *KPvolume
    with {

    // Original EKS damping filter:
    b1 = 0.5*bright; b0 = 1.0-b1; // S and 1-S
    dampingfilter1(x) = ((b0 * x) + (b1 * x'));
    // Linear phase FIR3 damping filter:
    h0 = (1.0 + bright)/2; h1 = (1.0 - bright)/4;
    dampingfilter2(x) = (h0 * x' + h1*(x+x''));
    };

    MyNonLinearModulator(nonlinearity,freq,phase,DC) =
      //theta is modulated by a sine wave
      fi.allpassnn(nlfOrder,(par(i,nlfOrder,tosc)))
      with{
        //theta is modulated by a sine wave generator
        tosc = (nonlinearity*ma.PI*PHosci(freq,phase))+DC;

        //incoming signal is sent to the nonlinear passive allpass ladder filter
        //nonLinearFilterOsc = _ <: fi.allpassnn(nlfOrder,(par(i,nlfOrder,tosc)));
      };
