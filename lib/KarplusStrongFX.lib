//-----------------------------------------------
// Karplus-Strong effect
//-----------------------------------------------

KPcenters(freq,oct) = VocoderFreqs(KPbottom,KPtop):(par(i,16, _,freq * oct:*:min(SR/2)));

KPanalizer(audio,freq) =
    analizer(audio,freq)
    :par(i,16,((_*KPvocoderStrength,((KPvocoderStrength*-1)+1)):+
    :linear2db) );//adapt to eq instead of bandpass


KPvocoder(audio,feedback,freq)= (KPcenters(freq,1),KPanalizer(voice(audio),freq),feedback,KPvocoderQ):EQbank*128;

stringloopFBpath(freq, oct,feedback,phase,nonLinearity,frequencyMod,DC) =
      //(( fdelay4(Pmax, P-2)))
  (( NLFM : fdelay4(Pmax, P-2) : loopfilter))
    with {
    nlfOrder = 16;
    P = SR/(freq*oct) ; // fundamental period in samples
    Pmax = 4096; // maximum P (for delay-line allocation)

    rho = pow(0.001,1.0/(freq*oct*feedback)); // multiplies loop-gain

    // Original EKS damping filter:
    b1 = 0.5*bright; b0 = 1.0-b1; // S and 1-S
    dampingfilter1(x) = rho * ((b0 * x) + (b1 * x'));
    // Linear phase FIR3 damping filter:
    h0 = (1.0 + bright)/2; h1 = (1.0 - bright)/4;
    dampingfilter2(x) = rho * (h0 * x' + h1*(x+x''));

    loopfilter = _*rho;//:dampingfilter1; // or dampingfilter2

    //nonlinear allpass filter (nonLinearModulator is declared in instrument.lib)
    NLFM =  MyNonLinearModulator(nonLinearity,frequencyMod*freq*oct,phase);

    MyNonLinearModulator(nonlinearity,freq,phase) =
        //theta is modulated by a sine wave
        _ <: allpassnn(nlfOrder,(par(i,nlfOrder,tosc)))
        with{
            //theta is modulated by a sine wave generator
            tosc = (nonlinearity*PI*PHosci(freq,phase))+DC;

            //incoming signal is sent to the nonlinear passive allpass ladder filter
            //nonLinearFilterOsc = _ <: allpassnn(nlfOrder,(par(i,nlfOrder,tosc)));
        };
    };

feedbackADSR(audio) = tanh(voice(audio)*2:amp_follower(KPrelease)):pow(4);

stringloopBank(freq,audio,feedback,phaseLL,phaseL,phase,phaseH,phaseHH,DCnonlinLL,DCnonlinL,DCnonlin,DCnonlinH,DCnonlinHH) =
    (_+feedback
    <:(    stringloopFBpath(freq,0.25,feedbackLL*feedbackADSR(audio),phaseLL,nonLinLL,frequencyModLL,DCnonlinLL),
    stringloopFBpath(freq,0.5,feedbackL*feedbackADSR(audio),phaseL,nonLinL,frequencyModL,DCnonlinL),
    stringloopFBpath(freq,1,feedbackM*feedbackADSR(audio),phase,nonLin,frequencyMod,DCnonlin),
    stringloopFBpath(freq,2,feedbackH*feedbackADSR(audio),phaseH,nonLinH,frequencyModH,DCnonlinH),
    stringloopFBpath(freq,4,feedbackHH*feedbackADSR(audio),phaseHH,nonLinHH,frequencyModHH,DCnonlinHH)
    )
    :>KPvocoder(audio,_,freq):dampingfilter1)~ //or dampingfilter2
//  feedback path
    ( compressor_mono(100,KPtresh,0,(1/(freq * subOctave ))))
    :_*KPvolume
    with {

    // Original EKS damping filter:
    b1 = 0.5*bright; b0 = 1.0-b1; // S and 1-S
    dampingfilter1(x) = ((b0 * x) + (b1 * x'));
    // Linear phase FIR3 damping filter:
    h0 = (1.0 + bright)/2; h1 = (1.0 - bright)/4;
    dampingfilter2(x) = (h0 * x' + h1*(x+x''));
    };

stringloop(freq,audio,feedback,phase,DCnonlin) =
    ((_+feedback
    :
    stringloopFBpath(freq,1,feedbackM*feedbackADSR(audio),phase,nonLin,frequencyMod,DCnonlin)
    )~ //or dampingfilter2
      //:KPvocoder(audio,_,freq):dampingfilter1)~ //or dampingfilter2
           ( compressor_mono(100,KPtresh,0,1/(freq *0.5 ))))
    *KPvolume
    with {

    // Original EKS damping filter:
    b1 = 0.5*bright; b0 = 1.0-b1; // S and 1-S
    dampingfilter1(x) = ((b0 * x) + (b1 * x'));
    // Linear phase FIR3 damping filter:
    h0 = (1.0 + bright)/2; h1 = (1.0 - bright)/4;
    dampingfilter2(x) = (h0 * x' + h1*(x+x''));
    };

/*simpleStringLoop = (_+feedback : fdelay4(Pmax, P-2):vocoder)~_:( compressor_mono(100,KPtresh,0,(1/(freq *0.5 ))))*/
  /*with {*/
    /*P = SR/(freq*oct) ; // fundamental period in samples*/
    /*Pmax = 4096; // maximum P (for delay-line allocation)*/
    /*};*/



